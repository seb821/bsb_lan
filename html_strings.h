const byte favicon [] PROGMEM_LATE = { 
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
  0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x08, 0x02, 0x00, 0x00, 0x00, 0x90, 0x91, 0x68,
  0x36, 0x00, 0x00, 0x00, 0x6c, 0x49, 0x44, 0x41, 0x54, 0x28, 0xcf, 0x95, 0x52, 0x41, 0x0e, 0xc0,
  0x20, 0x08, 0x03, 0xe2, 0xff, 0xbf, 0xcc, 0x0e, 0xdd, 0x18, 0xc1, 0x42, 0x42, 0x0f, 0xa6, 0x54,
  0xc0, 0x8a, 0xaa, 0x7c, 0x70, 0x77, 0x10, 0x55, 0xcd, 0x4a, 0x09, 0x5f, 0x86, 0x20, 0x56, 0xaa,
  0x80, 0x98, 0xf4, 0xf8, 0x5b, 0x26, 0xe8, 0xd6, 0x92, 0xe6, 0x8d, 0xd2, 0x12, 0x4a, 0xe8, 0x20,
  0x93, 0x25, 0x8a, 0x5a, 0x10, 0x06, 0x3a, 0xec, 0xef, 0x40, 0x47, 0x31, 0x59, 0xa2, 0x1e, 0xb2,
  0x58, 0xb8, 0xd1, 0x6c, 0x0c, 0x87, 0xd6, 0x18, 0xcd, 0x86, 0xe3, 0xec, 0x3e, 0xf8, 0x99, 0xfd,
  0xdc, 0x20, 0x05, 0xf7, 0xb8, 0xf2, 0x21, 0x8b, 0x87, 0x43, 0xa3, 0x23, 0xf4, 0x03, 0xf7, 0x78,
  0x00, 0x35, 0x57, 0x66, 0x05, 0xab, 0xf8, 0x2b, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
  0x44, 0xae, 0x42, 0x60, 0x82
};

const char graph_html[] PROGMEM_LATE =
"<!--\n"
"/*\n"
"	Based on the awesome tutorials at\n"
"		https://bl.ocks.org/d3noob\n"
"		https://bl.ocks.org/larsenmtl\n"
"	Thanks a lot for your great work!\n"
"*/\n"
"//-->\n"
"<style> /* set the CSS */\n"
"\n"
"path { \n"
"	stroke: steelblue;\n"
"	stroke-width: 2;\n"
"	fill: none;\n"
"}\n"
"\n"
".axis path,\n"
".axis line {\n"
"	fill: none;\n"
"	stroke: grey;\n"
"	stroke-width: 1;\n"
"	shape-rendering: crispEdges;\n"
"}\n"
"\n"
".legend {\n"
"	font-size: 16px;\n"
"	font-weight: bold;\n"
"	text-anchor: middle;\n"
"}\n"
"\n"
"</style>\n"
"<!-- load the d3.js library -->    \n"
"<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n"
"\n"
"<script>\n"
"\n"
"// Set the dimensions of the canvas / graph\n"
"var margin = {top: 30, right: 20, bottom: 70, left: 50},\n"
"width = 1000 - margin.left - margin.right,\n"
"height = 600 - margin.top - margin.bottom;\n"
"\n"
"// Parse the date / time\n"
"var parseDate = d3.time.format(\"%d.%m.%Y %H:%M:%S\").parse;\n"
"\n"
"// Set the ranges\n"
"var x = d3.time.scale().range([0, width]);\n"
"var y = d3.scale.linear().range([height, 0]);\n"
"\n"
"// Define the axes\n"
"var axisTimeFormat = d3.time.format.multi([\n"
"	[\".%L\", function(d) { return d.getMilliseconds(); }],\n"
"	[\":%S\", function(d) { return d.getSeconds(); }],\n"
"	[\"%H:%M\", function(d) { return d.getMinutes(); }],\n"
"	[\"%H:%M\", function(d) { return d.getHours(); }],\n"
"	[\"%d.%m\", function(d) { return d.getDay() && d.getDate() != 1; }],\n"
"	[\"%m.%Y\", function(d) { return d.getDate() != 1; }],\n"
"	[\"%B\", function(d) { return d.getMonth(); }],\n"
"	[\"%Y\", function() { return true; }]\n"
" ]);\n"
"\n"
"var xAxis = d3.svg.axis().scale(x)\n"
"		.orient(\"bottom\").ticks(5)\n"
"		.tickFormat(axisTimeFormat);\n"
"\n"
"var yAxis = d3.svg.axis().scale(y)\n"
"		.orient(\"left\").ticks(5);\n"
"\n"
"// Define the line\n"
"var priceline = d3.svg.line()	\n"
"	.x(function(d) { return x(d.Date); })\n"
"	.y(function(d) { return y(d.Value); });\n"
"    \n"
"// Get the data\n"
"var dsv = d3.dsv(\";\", \"text/plain\");\n"
"dsv(\"D\", function(data) {\n"
"\n"
"	data.forEach(function(d) {\n"
"		d.Date = parseDate(d.Date);\n"
"		d.Value = +d.Value;\n"
"    	});\n"
"\n"
"	// Scale the range of the data\n"
"	x.domain(d3.extent(data, function(d) { return d.Date; }));\n"
"	y.domain([0, d3.max(data, function(d) { return d.Value; })]);\n"
"\n"
"    	// Nest the entries by symbol\n"
"    	var dataNest = d3.nest()\n"
"        	.key(function(d) {return d.Description;})\n"
"        	.entries(data);\n"
"\n"
"// Adds the svg canvas\n"
"var svg = d3.select(\"div\")\n"
"    .append(\"svg\")\n"
"     .attr(\"width\", width + margin.left + margin.right)\n"
"     .attr(\"height\", height + margin.top + margin.bottom + dataNest.length/4 * 15)\n"
"   .append(\"g\")\n"
"     .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n"
"\n"
"	var color = d3.scale.category10();   // set the colour scale\n"
"\n"
"	legendSpace = width/dataNest.length; // spacing for the legend\n"
"\n"
"	// Loop through each symbol / key\n"
"	dataNest.forEach(function(d,i) { \n"
"\n"
"		svg.append(\"path\")\n"
"        		.attr(\"class\", \"line\")\n"
"        		.style(\"stroke\", function() { // Add the colours dynamically\n"
"                		return d.color = color(d.key); })\n"
"			.attr(\"id\", 'tag'+d.key.replace(/\\s+/g, '')) // assign ID\n"
"			.attr(\"d\", priceline(d.values));\n"
"\n"
"		// Add the Legend\n"
"		svg.append(\"text\")\n"
"            		.attr(\"x\", (margin.left + legendSpace/2 + (i % 4) * width / 4))  // space legend\n"
"            		.attr(\"y\", height + (margin.bottom/2)+ 5 + Math.floor(i/4)*20)\n"
"            		.attr(\"class\", \"legend\")    // style the legend\n"
"            		.style(\"fill\", function() { // Add the colours dynamically\n"
"                		return d.color = color(d.key); })\n"
"			.on(\"click\", function(){\n"
"				// Determine if current line is visible \n"
"				var active   = d.active ? false : true,\n"
"				newOpacity = active ? 0 : 1; \n"
"				// Hide or show the elements based on the ID\n"
"				d3.select(\"#tag\"+d.key.replace(/\\s+/g, ''))\n"
"					.transition().duration(100) \n"
"					.style(\"opacity\", newOpacity); \n"
"				// Update whether or not the elements are active\n"
"				d.active = active;\n"
"			})\n"
"			.text(d.key); \n"
"	});\n"
"\n"
"	var mouseG = svg.append(\"g\")\n"
"	.attr(\"class\", \"mouse-over-effects\");\n"
"\n"
"	mouseG.append(\"path\") // this is the black vertical line to follow mouse\n"
"		.attr(\"class\", \"mouse-line\")\n"
"		.style(\"stroke\", \"black\")\n"
"		.style(\"stroke-width\", \"1px\")\n"
"		.style(\"opacity\", \"0\");\n"
"\n"
"	var lines = document.getElementsByClassName('line');\n"
"\n"
"	var mousePerLine = mouseG.selectAll('.mouse-per-line')\n"
"		.data(dataNest)\n"
"		.enter()\n"
"		.append(\"g\")\n"
"		.attr(\"class\", \"mouse-per-line\");\n"
"\n"
"	mousePerLine.append(\"circle\")\n"
"		.attr(\"r\", 7)\n"
"		.attr(\"id\", function(d) {\n"
"			return 'tag'+d.key.replace(/\\s+/g, '')	// assign ID\n"
"		})\n"
"		.style(\"stroke\", function(d) {\n"
"			return color(d.key);\n"
"		})\n"
"		.style(\"fill\", \"none\")\n"
"		.style(\"stroke-width\", \"1px\")\n"
"		.style(\"opacity\", \"0\");\n"
"\n"
"	mousePerLine.append(\"text\")\n"
"		.attr(\"id\", function(d) {\n"
"			return 'tag'+d.key.replace(/\\s+/g, '')	// assign ID\n"
"		})\n"
"		.attr(\"transform\", \"translate(10,3)\");\n"
"\n"
"	mouseG.append('svg:rect') // append a rect to catch mouse movements on canvas\n"
"		.attr('width', width) // can't catch mouse events on a g element\n"
"		.attr('height', height)\n"
"		.attr('fill', 'none')\n"
"		.attr('pointer-events', 'all')\n"
"		.on('mouseout', function() { // on mouse out hide line, circles and text\n"
"			d3.select(\".mouse-line\")\n"
"				.style(\"opacity\", \"0\");\n"
"			d3.selectAll(\".mouse-per-line circle\")\n"
"				.style(\"opacity\", \"0\");\n"
"			d3.selectAll(\".mouse-per-line text\")\n"
"				.style(\"opacity\", \"0\");\n"
"		})\n"
"		.on('mouseover', function() { // on mouse in show line, circles and text\n"
"			d3.select(\".mouse-line\")\n"
"				.style(\"opacity\", \"1\");\n"
"			d3.selectAll(\".mouse-per-line circle\")\n"
"				.style(\"opacity\", function(d) {\n"
"					return d.active ? 0 : 1;;\n"
"				});\n"
"			d3.selectAll(\".mouse-per-line text\")\n"
"				.style(\"opacity\", function(d) {\n"
"					return d.active ? 0 : 1;;\n"
"				});\n"
"		})\n"
"		.on('mousemove', function() { // mouse moving over canvas\n"
"			var mouse = d3.mouse(this);\n"
"			d3.select(\".mouse-line\")\n"
"				.attr(\"d\", function() {\n"
"					var d = \"M\" + mouse[0] + \",\" + height;\n"
"					d += \" \" + mouse[0] + \",\" + 0;\n"
"					return d;\n"
"				});\n"
"\n"
"			d3.selectAll(\".mouse-per-line\")\n"
"				.attr(\"transform\", function(d, i) {\n"
"					var xDate = x.invert(mouse[0]),\n"
"					bisect = d3.bisector(function(d) { return d.Date; }).right;\n"
"					idx = bisect(d.values, xDate);\n"
"\n"
"					var beginning = 0,\n"
"					end = lines[i].getTotalLength(),\n"
"					target = null;\n"
"\n"
"					while (true){\n"
"						target = Math.floor((beginning + end) / 2);\n"
"						pos = lines[i].getPointAtLength(target);\n"
"						if ((target === end || target === beginning) && pos.x !== mouse[0]) {\n"
"							break;\n"
"						}\n"
"						if (pos.x > mouse[0]) end = target;\n"
"						else if (pos.x < mouse[0]) beginning = target;\n"
"						else break; //position found\n"
"					}\n"
"\n"
"					outputFormat = d3.time.format(\"%H:%M:%S\");\n"
"					d3.select(this).select('text')\n"
"					.text(d.values[idx].Value + \" (\" + outputFormat(d.values[idx].Date) + \")\");\n"
"\n"
"					return \"translate(\" + mouse[0] + \",\" + pos.y +\")\";\n"
"				});\n"
"	});\n"
"\n"
"	// Add the X Axis\n"
"	svg.append(\"g\")\n"
"		.attr(\"class\", \"x axis\")\n"
"		.attr(\"transform\", \"translate(0,\" + height + \")\")\n"
"		.call(xAxis);\n"
"\n"
"	// Add the Y Axis\n"
"	svg.append(\"g\")\n"
"		.attr(\"class\", \"y axis\")\n"
"		.call(yAxis);\n"
"\n"
"});\n"
"\n"
"</script>\n";

const char header_html[] PROGMEM_LATE = 
  "HTTP/1.1 200 OK\n"
  "Content-Type: text/html\n"
  "Cache-Control: no-cache, no-store, must-revalidate\n"
  "Pragma: no-cache\n"
  "Expires: 0\n\n"
  "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n"
  "<html><head>\n"
  "<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">\n"
  "<title>BSB-LAN Web</title>\n"
  "<style>A:link  {color:blue;text-decoration: none;} A:visited {color:blue;text-decoration: none;} A:hover {color:red;text-decoration: none;background-color:yellow} A:active {color:blue;text-decoration: none;} A:focus {color:red;text-decoration: none;}\n"
  "input {width: 100%; box-sizing: border-box;} select {width: 100%;}</style>\n"
  "</head><body>\n"
  "<script>function set(line){\n"
  "var value = document.getElementById('value'+line).value.replace(\":\", \".\");\n"
  "if(isNaN(value)==false){\n"
  "window.open(document.getElementById('main_link').href+'S'+line+'='+document.getElementById('value'+line).value,'_self');\n"
  "}}\n"
  "function setbit(line){\n"
  "var x=document.getElementById('value'+line); var value=0;\n"
  "for (var i=0; i<x.options.length; i++) {\n"
  "if(x.options[i].selected){\n"
  "value=value+eval(x.options[i].value);\n"
  "}}\n"
  "window.open(document.getElementById('main_link').href+'S'+line+'='+value,'_self');\n"
  "}</script>\n"
  "<font face='Arial'>\n"
  "<center><h1><A ID=main_link HREF='/";

const char url_command_html[] PROGMEM_LATE =

#ifdef LANG_DE
  "<p>Erweiterte Befehle:\n"
  "<table>\n"
  "<tr><td valign=top>/K</td><td>Alle verfügbaren Kategorien auflisten.</td></tr>\n"
  "<tr><td valign=top>/Kx</td><td>Alle Werte von Kategorie x abfragen.</td></tr>\n"
  "<tr><td valign=top>/x-y</td><td>Alle Werte eines Zeilenbereichs abfragen (von Zeile x bis Zeile y).</td></tr>\n"
  "<tr><td valign=top>/Sx=v</td><td>Setze Wert v (value) für den Parameter x (Leerzeichen nach = deaktiviert den Wert).</td></tr>\n"
  "<tr><td valign=top>/Ix=v</td><td>Sende eine INF Nachricht für den Parameter x mit dem Wert v.</td></tr>\n"
  "<tr><td valign=top>/Ex</td><td>Alle enum-Werte für Parameter x auflisten.</td></tr>\n"
  "<tr><td valign=top>/Rx</td><td>Frage den Reset-Wert für Parameter x ab.</td></tr>\n"
  "<tr><td valign=top>/Px</td><td>Setzen des Bus-Protokolls (0=BSB, 1=LPB, 2=PPS).</td></tr>\n"
  "<tr><td valign=top>/Vn</td><td>Setze den Verbositäts-Level auf n.</td></tr>\n"
  "<tr><td valign=top>/Mn</td><td>Bus-Monitor aktivieren/deaktivieren (n=0 deaktivieren, n=1 aktivieren).</td></tr>\n"
  "<tr><td valign=top>/Gxx[,I]</td><td>Abfragen des GPIO Pins xx [und setzten des Pins auf 'INPUT'].</td></tr>\n"
  "<tr><td valign=top>/Gxx=y</td><td>Setzen des GPIO Pins xx auf high (y=1) oder low (y=0).</td></tr>\n"
  "<tr><td valign=top>/A</td><td>24h-Durchschnittswerte von ausgewählten Parametern anzeigen (in BSB_lan_config.h definieren).</td></tr>\n"
  "<tr><td valign=top>/A=x,y,z</td><td>Ändern der 24h-Durchschnittswerte in x,y,z (bis zu 20 Parameter).</td></tr>\n"
  "<tr><td valign=top>/B</td><td>Anzeige der akkumulierten Broadcast-Telegramme zu Brenner- und TWW-Aktivitäten.</td></tr>\n"
  "<tr><td valign=top>/B0</td><td>Zurücksetzen der akkumulierten Broadcast-Telegramme.</td></tr>\n"
#else
  "<p>Advanced commands:\n"
  "<table>\n"
  "<tr><td valign=top>/K</td><td>List available categories.</td></tr>\n"
  "<tr><td valign=top>/Kx</td><td>Query all values in category x.</td></tr>\n"
  "<tr><td valign=top>/x-y</td><td>Query all values from line x up to line y.</td></tr>\n"
  "<tr><td valign=top>/Sx=v</td><td>Set value v for line x and query the new value afterwards (empty string after = disables the value).</td></tr>\n"
  "<tr><td valign=top>/Ix=v</td><td>Send INF message for command in line x with value v.</td></tr>\n"
  "<tr><td valign=top>/Ex</td><td>List enum values for line x.</td></tr>\n"
  "<tr><td valign=top>/Rx</td><td>Query reset value for line x.</td></tr>\n"
  "<tr><td valign=top>/Px</td><td>Set bus protocol (0=BSB, 1=LPB, 2=PPS).</td></tr>\n"
  "<tr><td valign=top>/Vn</td><td>Set verbosity level for serial output to n.</td></tr>\n"
  "<tr><td valign=top>/Mn</td><td>Activate/deactivate monitor functionality (n=0 disable, n=1 enable).</td></tr>\n"
  "<tr><td valign=top>/Gxx[,I]</td><td>Query GPIO pin xx [and set pin to 'INPUT'].</td></tr>\n"
  "<tr><td valign=top>/Gxx=y</td><td>Set GPIO pin xx to high (y=1) or low (y=0).</td></tr>\n"
  "<tr><td valign=top>/A</td><td>Show 24h averages of selected parameters (define in BSB_lan_config.h).</td></tr>\n"
  "<tr><td valign=top>/A=x,y,z</td><td>Change 24h averages parameters to x,y,z (up to 20).</td></tr>\n"
  "<tr><td valign=top>/B</td><td>Query accumulated broadcast telegrams of burner and hot water activity.</td></tr>\n"
  "<tr><td valign=top>/B0</td><td>Reset accumulated broadcast telegrams.</td></tr>\n"
#endif

#ifndef ONE_WIRE_BUS
#ifdef LANG_DE
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Aktiviere das Definement <code>#define ONE_WIRE_BUS</code> in BSB_lan_config.h für den folgenden Befehl:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/T</td><td>Abfrage von angeschlossenen DS18B20 Temperatursensoren (optional).</td></tr>\n"
#else
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Activate definement <code>#define ONE_WIRE_BUS</code> in BSB_lan_config.h for the following command:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/T</td><td>Query values of connected ds18b20 temperature sensors (optional).</td></tr>\n"
#endif  
#else
#ifdef LANG_DE
  "<tr><td valign=top>/T</td><td>Abfrage von angeschlossenen DS18B20 Temperatursensoren (optional).</td></tr>\n"
#else
  "<tr><td valign=top>/T</td><td>Query values of connected ds18b20 temperature sensors (optional).</td></tr>\n"
#endif
#endif

#ifndef DHT_BUS
#ifdef LANG_DE
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Aktiviere das Definement <code>#define DHT_BUS</code> in BSB_lan_config.h für den folgenden Befehl:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/H</td><td>Abfrage von DHT22 Feuchtigkeits-/Temperatursensoren (optional).</td></tr>\n"
#else
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Activate definement <code>#define DHT_BUS</code> in BSB_lan_config.h for the following command:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/H</td><td>Query values of connected DHT22 humidity/temperature sensors (optional).</td></tr>\n"
#endif
#else
#ifdef LANG_DE
  "<tr><td valign=top>/H</td><td>Abfrage von DHT22 Feuchtigkeits-/Temperatursensoren (optional).</td></tr>\n"
#else
  "<tr><td valign=top>/H</td><td>Query values of connected DHT22 humidity/temperature sensors (optional).</td></tr>\n"
#endif
#endif

#ifndef MAX_CUL
#ifdef LANG_DE
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Aktiviere das Definement <code>#define MAX_CUL</code> in BSB_lan_config.h für den folgenden Befehl:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/X</td><td>Abfrage von MAX! Heizkörper-/Wandthermostaten (optional).</td></tr>\n"
#else
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Activate definement <code>#define MAX_CUL</code> in BSB_lan_config.h for the following command:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/X</td><td>Query values of MAX! heating/wall thermostats (optional).</td></tr>\n"
#endif
#else
#ifdef LANG_DE
  "<tr><td valign=top>/X</td><td>Abfrage von MAX! Heizkörper-/Wandthermostaten (optional).</td></tr>\n"
#else
  "<tr><td valign=top>/X</td><td>Query values of MAX! heating/wall thermostats (optional).</td></tr>\n"
#endif
#endif

#ifndef LOGGER
#ifdef LANG_DE
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Aktiviere das Definement <code>#define LOGGER</code> in BSB_lan_config.h für die folgenden Befehle:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/D</td><td>Darstellung des Logfiles datalog.txt auf der microSD-Karte.</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/D0</td><td>Löschen bzw. Zurücksetzen des Logfiles datalog.txt auf der microSD-Karte.</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/L=x,y,z</td><td>Setzt das Logging-Intervall auf x Sekunden und (optional) die Logging-Parameter auf y und z (bis zu 20 Parameter). Um das Loggen zu deaktivieren, kann L=0,0 genutzt werden.</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/LU=x</td><td>Wenn Bus-Telegramme geloggt werden (Logging-Parameter 30000 als einzigen Parameter setzen!), logge nur unbekannte commandIDs (x=1) oder alle Telegramme (x=0).</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/LB=x</td><td>Wenn Bus-Telegramme geloggt werden (Logging-Parameter 30000 als einzigen Parameter setzen!), logge nur Broadcast-Telegramme (x=1) oder alle Telegramme (x=0).</td></tr>\n"
#else
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Activate definement <code>#define LOGGER</code> in BSB_lan_config.h for the following commands:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/D</td><td>Dump logged data from datalog.txt on micro SD card.</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/D0</td><td>Delete datalog.txt on micro SD card.</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/L=x,y,z</td><td>Set logging interval to x seconds and (optionally) sets logging parameters to y and z (up to 20). To deactivate logging, you can use L=0,0.</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/LU=x</td><td>When logging bus telegrams (logging parameter 30000 only), log only unknown command IDs (x=1) or all (x=0) telegrams.</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/LB=x</td><td>When logging bus telegrams (logging parameter 30000 only), log only broadcast telegrams (x=1) or all (x=0) telegrams.</td></tr>\n"
#endif  
#else
#ifdef LANG_DE
  "<tr><td valign=top>/D</td><td>Darstellung des Logfiles datalog.txt auf der microSD-Karte.</td></tr>\n"
  "<tr><td valign=top>/D0</td><td>Löschen bzw. Zurücksetzen des Logfiles datalog.txt auf der microSD-Karte.</td></tr>\n"
  "<tr><td valign=top>/J=x,y,z</td><td>JSON-Export der Parameter x, y and z.\n"
  "<tr><td valign=top>/JQ</td><td>Empfängt einen HTTP-POST Request mit der (mehrfach möglichen) Variable \"Parameter\" und gibt die Werte als JSON-Export zurück.\n"
  "<tr><td valign=top>/JS</td><td>Empfängt einen HTTP-POST Request mit den (mehrfach möglichen) Variablen \"Parameter\", \"Value\" (nur numerisch) und \"Type\" (0=INF, 1=SET) und gibt die Werte als JSON-Export zurück.\n"
  "<tr><td valign=top>/L=x,y,z</td><td>Setzt das Logging-Intervall auf x Sekunden und (optional) die Logging-Parameter auf y und z (bis zu 20 Parameter). Um das Loggen zu deaktivieren, kann L=0,0 genutzt werden.</td></tr>\n"
  "<tr><td valign=top>/LU=x</td><td>Wenn Bus-Telegramme geloggt werden (Logging-Parameter 30000 als einzigen Parameter setzen!), logge nur unbekannte commandIDs (x=1) oder alle Telegramme (x=0).</td></tr>\n"
  "<tr><td valign=top>/LU=x</td><td>Wenn Bus-Telegramme geloggt werden (Logging-Parameter 30000 als einzigen Parameter setzen!), logge nur Broadcast-Telegramme (x=1) oder alle Telegramme (x=0).</td></tr>\n"
#else
  "<tr><td valign=top>/D</td><td>Dump logged data from datalog.txt on micro SD card.</td></tr>\n"
  "<tr><td valign=top>/D0</td><td>Delete datalog.txt on micro SD card.</td></tr>\n"
  "<tr><td valign=top>/J=x,y,z</td><td>JSON-Export of parameterx x, y and z.\n"
  "<tr><td valign=top>/JQ</td><td>Receives a HTTP-POST Request with (multiple occurrances of) variable \"Parameter\" and returns the values as JSON-export.\n"
  "<tr><td valign=top>/JS</td><td>Receives a HTTP-POST Request with (multiple occurrances of) variables \"Parameter\", \"Value\" (numeric only) and \"Type\" (0=INF, 1=SET) and returns the values as JSON-export.\n"
  "<tr><td valign=top>/L=x,y,z</td><td>Set logging interval to x seconds and (optionally) sets logging parameters to y and z (up to 20). To deactivate logging, you can use L=0,0.</td></tr>\n"
  "<tr><td valign=top>/LU=x</td><td>When logging bus telegrams (logging parameter 30000 only), log only unknown command IDs (x=1) or all (x=0) telegrams.</td></tr>\n"
  "<tr><td valign=top>/LB=x</td><td>When logging bus telegrams (logging parameter 30000 only), log only broadcast telegrams (x=1) or all (x=0) telegrams.</td></tr>\n"
#endif
#endif

#ifndef RESET
#ifdef LANG_DE
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Aktiviere das Definement <code>#define RESET</code> in BSB_lan_config.h für den folgenden Befehl:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/N</td><td>Reset des Arduino durchführen.</td></tr>\n"
#else
  "<tr bgcolor=#f0f0f0><td valign=top></td><td>Activate definement <code>#define RESET</code> in BSB_lan_config.h for the following command:</td></tr>\n"
  "<tr bgcolor=#f0f0f0><td valign=top>/N</td><td>Execute a reset of the Arduino.</td></tr>\n"
#endif
#else
#ifdef LANG_DE
  "<tr><td valign=top>/N</td><td>Reset des Arduino durchführen.</td></tr>\n"
#else
  "<tr><td valign=top>/N</td><td>Execute a reset of the Arduino.</td></tr>\n"
#endif
#endif
  "</table>\n"

#ifdef LANG_DE
  "Mehrere Abfragen können miteinander verkettet werden, z.B. <code>/K0/710/8000-8999/T</code></p>\n"
#else
  "Multiple queries are possible, e.g. <code>/K0/710/8000-8999/T</code></p>\n"
#endif
  "\n";

